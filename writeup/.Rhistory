### Data Preparation
#### Load Relevant Libraries and Functions
library(readr)
library(dplyr)
library(ggplot2)
library(ez)
library(osfr)
library(tidyr)
#### Import data
files <- list.files(path="~/Desktop/tarampi2016_rescue/pilot data/", full.names = TRUE)
# read in and combine all the CSV files using bind_rows()
combined_data <- lapply(files, function(filepath) {
df <- read.csv(filepath)
return(df)
})%>%
bind_rows()
#### Data exclusion / filtering
# exclude unwanted columns and rows
organized.data <- combined_data %>%
select("subject_id", "stimulus","response", "condition", "correct") %>%
filter (response != 0 ) %>%
filter (subject_id != "na")
#### Prepare data for analysis - create columns etc.
correct_counts <- organized.data %>%
mutate(gender = case_when(response == '{"sex":"Female"}' ~ "Female",
response == '{"sex":"Male"}' ~ "Male",
response == '{"sex":"Other"}' ~ "Other"))
ready_data <-correct_counts%>%
group_by(subject_id,) %>%
mutate(correct_count = sum(correct, na.rm=TRUE))%>%
filter(is.na(gender)==FALSE)
graph_data = ready_data %>%
group_by(condition, gender) %>%
summarise(mean_correct = mean(correct_count), mean_sem = sd(correct_count) / sqrt(n()))
#descriptive statistics
ggplot(data = graph_data, aes(x = gender, y = mean_correct, fill = condition)) +
# Dodge the bars based on condition
geom_col(position = "dodge", width = 0.5) +
# Dodge the error bars as well
geom_errorbar(
aes(ymin = mean_correct - mean_sem, ymax = mean_correct + mean_sem),
width = 0.2, position = position_dodge(0.5)) +
# Dodge the text labels, too
geom_text(aes(label = sprintf("%.2f", mean_correct)), vjust = -1.2, position = position_dodge(0.5))
View(correct_counts)
View(correct_counts)
View(correct_counts)
View(graph_data)
View(graph_data)
View(combined_data)
View(anova)
View(graph_data)
View(combined_data)
View(correct_counts)
View(combined_data)
View(combined_data)
View(correct_counts)
View(correct_counts)
View(combined_data)
View(correct_counts)
precentage_correct <- correct_counts%>%
mutate(correct_percent = (sum (correct == "True"))/(sum (correct == "True") + sum (correct == "False")))
precentage_correct <- correct_counts %>%
mutate(correct_percent = (sum (correct == "True"))/(sum (correct == "True") + sum (correct == "False")))
library(tidyr)
### Data Preparation
#### Load Relevant Libraries and Functions
library(readr)
library(dplyr)
library(ggplot2)
library(ez)
library(osfr)
library(tidyr)
#### Import data
files <-list.files(path = "~/Desktop/tarampi2016_rescue/pilotb data/", full.names = TRUE)
# read in and combine all the CSV files using bind_rows()
combined_data <- lapply(files, function(filepath) {
df <- read.csv(filepath)
return(df)
}) %>%
bind_rows()
#### Data exclusion / filtering
# exclude unwanted columns and rows
organized.data <- combined_data %>%
select("workerid",
"stimulus",
"response",
"condition",
"correct",
"bothQuestionsCorrect") %>%
filter (response != 0) %>%
filter (workerid != "na")
#### Prepare data for analysis - create columns etc.
correct_counts <- organized.data %>%
mutate(gender_extracted = gsub("^.*'sex': '([A-Za-z]+)'.*$", "\\1", response)) %>%  # Extract gender value
mutate(gender = ifelse(
gender_extracted %in% c("Female", "Male", "Other"),
gender_extracted,
NA
))
precentage_correct <- correct_counts %>%
mutate(correct_percent = (sum (correct == "True"))/(sum (correct == "True") + sum (correct == "False")))
ready_data <- correct_counts %>%
group_by(workerid) %>%
mutate(correct_count = sum(correct == "True", na.rm = TRUE)) %>%
filter(is.na(gender) == FALSE)
graph_data = ready_data %>%
group_by(condition, gender) %>%
mutate(mean_correct = mean(correct_count),mean_sem = sd(correct_count) / sqrt(n())
)
#descriptive statistics
ggplot(data = graph_data, aes(x = gender, y = mean_correct, fill = condition)) +
# Dodge the bars based on condition
geom_col(position = "dodge", width = 0.5) +
# Dodge the error bars as well
geom_errorbar(
aes(ymin = mean_correct - mean_sem, ymax = mean_correct + mean_sem),
width = 0,
position = position_dodge(0.5)
)
precentage_correct <- correct_counts %>%
mutate(correct_percent = (sum (correct == "True"))/(sum (correct == "True") + sum (correct == "False")))
View(precentage_correct)
precentage_correct <- correct_counts %>%
group_by(workerid)%>%
mutate(correct_percent = (sum (correct == "True"))/(sum (correct == "True") + sum (correct == "False")))
View(precentage_correct)
View(correct_counts)
View(combined_data)
View(correct_counts)
View(precentage_correct)
ready_data <- precentage_correct %>%
group_by(workerid) %>%
mutate(correct_count = sum(correct == "True", na.rm = TRUE)) %>%
filter(is.na(gender) == FALSE)
### Data Preparation
#### Load Relevant Libraries and Functions
library(readr)
library(dplyr)
library(ggplot2)
library(ez)
library(osfr)
library(tidyr)
#### Import data
files <-list.files(path = "~/Desktop/tarampi2016_rescue/pilotb data/", full.names = TRUE)
# read in and combine all the CSV files using bind_rows()
combined_data <- lapply(files, function(filepath) {
df <- read.csv(filepath)
return(df)
}) %>%
bind_rows()
#### Data exclusion / filtering
# exclude unwanted columns and rows
organized.data <- combined_data %>%
select("workerid",
"stimulus",
"response",
"condition",
"correct",
"bothQuestionsCorrect") %>%
filter (response != 0) %>%
filter (workerid != "na")
#### Prepare data for analysis - create columns etc.
correct_counts <- organized.data %>%
mutate(gender_extracted = gsub("^.*'sex': '([A-Za-z]+)'.*$", "\\1", response)) %>%  # Extract gender value
mutate(gender = ifelse(
gender_extracted %in% c("Female", "Male", "Other"),
gender_extracted,
NA
))
precentage_correct <- correct_counts %>%
group_by(workerid)%>%
mutate(correct_percent = (sum (correct == "True"))/(sum (correct == "True") + sum (correct == "False")))
ready_data <- precentage_correct %>%
group_by(workerid) %>%
mutate(correct_count = sum(correct == "True", na.rm = TRUE)) %>%
filter(is.na(gender) == FALSE)
graph_data = ready_data %>%
group_by(condition, gender) %>%
mutate(mean_correct = mean(correct_count),mean_sem = sd(correct_count) / sqrt(n())
)
#descriptive statistics
ggplot(data = graph_data, aes(x = gender, y = mean_correct, fill = condition)) +
# Dodge the bars based on condition
geom_col(position = "dodge", width = 0.5) +
# Dodge the error bars as well
geom_errorbar(
aes(ymin = mean_correct - mean_sem, ymax = mean_correct + mean_sem),
width = 0,
position = position_dodge(0.5)
)
View(ready_data)
#### Prepare data for analysis - create columns etc.
correct_counts <- organized.data %>%
mutate(gender_extracted = gsub("^.*'sex': '([A-Za-z]+)'.*$", "\\1", response)) %>%  # Extract gender value
mutate(gender = ifelse(
gender_extracted %in% c("Female", "Male", "Other"),
gender_extracted,
NA
))%>%
mutate(blank_one = str_extract(data$responses, "(?<=name=\"first\" type=\"text\" required />)[^<]*")) %>%
mutate(blank_two = str_extract(data$responses, "(?<=name=\"second\" type=\"text\" required />)[^<]*"))
install.packages("stringr")
install.packages("stringr")
library(stringr)
#### Prepare data for analysis - create columns etc.
correct_counts <- organized.data %>%
mutate(gender_extracted = gsub("^.*'sex': '([A-Za-z]+)'.*$", "\\1", response)) %>%  # Extract gender value
mutate(gender = ifelse(
gender_extracted %in% c("Female", "Male", "Other"),
gender_extracted,
NA
))%>%
mutate(blank_one = str_extract(data$responses, "(?<=name=\"first\" type=\"text\" required />)[^<]*")) %>%
mutate(blank_two = str_extract(data$responses, "(?<=name=\"second\" type=\"text\" required />)[^<]*"))
### Data Preparation
#### Load Relevant Libraries and Functions
library(readr)
library(dplyr)
library(ggplot2)
library(ez)
library(osfr)
library(tidyr)
library(stringr)
#### Import data
files <-list.files(path = "~/Desktop/tarampi2016_rescue/pilotb data/", full.names = TRUE)
# read in and combine all the CSV files using bind_rows()
combined_data <- lapply(files, function(filepath) {
df <- read.csv(filepath)
return(df)
}) %>%
bind_rows()
#### Data exclusion / filtering
# exclude unwanted columns and rows
organized.data <- combined_data %>%
select("workerid",
"stimulus",
"response",
"condition",
"correct",
"bothQuestionsCorrect") %>%
filter (response != 0) %>%
filter (workerid != "na")
#### Prepare data for analysis - create columns etc.
correct_counts <- organized.data %>%
mutate(gender_extracted = gsub("^.*'sex': '([A-Za-z]+)'.*$", "\\1", response)) %>%  # Extract gender value
mutate(gender = ifelse(
gender_extracted %in% c("Female", "Male", "Other"),
gender_extracted,
NA
))%>%
mutate(blank_one = str_extract(data$responses, "(?<=name=\"first\" type=\"text\" required />)[^<]*")) %>%
mutate(blank_two = str_extract(data$responses, "(?<=name=\"second\" type=\"text\" required />)[^<]*"))
View(organized.data)
#### Prepare data for analysis - create columns etc.
correct_counts <- organized.data %>%
mutate(gender_extracted = gsub("^.*'sex': '([A-Za-z]+)'.*$", "\\1", response)) %>%  # Extract gender value
mutate(gender = ifelse(
gender_extracted %in% c("Female", "Male", "Other"),
gender_extracted,
NA
))%>%
mutate(blank_one = str_extract(organized.data$response, "(?<=name=\"first\" type=\"text\" required />)[^<]*")) %>%
mutate(blank_two = str_extract(organized.data$response, "(?<=name=\"second\" type=\"text\" required />)[^<]*"))
View(correct_counts)
View(correct_counts)
#### Prepare data for analysis - create columns etc.
correct_counts <- organized.data %>%
mutate(gender_extracted = gsub("^.*'sex': '([A-Za-z]+)'.*$", "\\1", response)) %>%  # Extract gender value
mutate(gender = ifelse(
gender_extracted %in% c("Female", "Male", "Other"),
gender_extracted,
NA
))%>%
mutate(blank_one = gsub(".*name=\"first\" type=\"text\" required />(.*?)<.*", "\\1", response)) %>%
mutate(blank_two = gsub(".*name=\"second\" type=\"text\" required />(.*?)<.*", "\\1", response))
View(correct_counts)
#### Prepare data for analysis - create columns etc.
correct_counts <- organized.data %>%
mutate(gender_extracted = gsub("^.*'sex': '([A-Za-z]+)'.*$", "\\1", response)) %>%  # Extract gender value
mutate(gender = ifelse(
gender_extracted %in% c("Female", "Male", "Other"),
gender_extracted,
NA
))%>%
mutate(
blank_one = str_extract(response, "(?<=name=\"first\" type=\"text\" required \>).+?(?=often score higher on measures of)"),
#### Prepare data for analysis - create columns etc.
correct_counts <- organized.data %>%
mutate(gender_extracted = gsub("^.*'sex': '([A-Za-z]+)'.*$", "\\1", response)) %>%  # Extract gender value
mutate(gender = ifelse(
gender_extracted %in% c("Female", "Male", "Other"),
gender_extracted,
NA
))%>%
mutate(
blank_one = str_extract(response, "(?<=name=\"first\" type=\"text\" required \>).+?(?=often score higher on measures of)"),
#### Prepare data for analysis - create columns etc.
correct_counts <- organized.data %>%
mutate(gender_extracted = gsub("^.*'sex': '([A-Za-z]+)'.*$", "\\1", response)) %>%  # Extract gender value
mutate(gender = ifelse(
gender_extracted %in% c("Female", "Male", "Other"),
gender_extracted,
NA
))%>%
mutate(
blank_one = str_extract(response, "(?<=name=\"first\" type=\"text\" required >).+?(?=often score higher on measures of)"),
blank_two = str_extract(response, "(?<=on measures of ).+?(?= ability\\.)")
)
View(correct_counts)
#### Prepare data for analysis - create columns etc.
correct_counts <- organized.data %>%
mutate(gender_extracted = gsub("^.*'sex': '([A-Za-z]+)'.*$", "\\1", response)) %>%  # Extract gender value
mutate(gender = ifelse(
gender_extracted %in% c("Female", "Male", "Other"),
gender_extracted,
NA
))%>%
mutate(
first_input = gsub(".*'first': '([^']+)',.*", "\\1", response),
second_input = gsub(".*'second': '([^']+)'\\}.*", "\\1", response)
)
View(correct_counts)
View(organized.data)
View(combined_data)
View(correct_counts)
View(correct_counts)
library(stringr)
### Data Preparation
#### Load Relevant Libraries and Functions
library(readr)
library(dplyr)
library(ggplot2)
library(ez)
library(osfr)
library(tidyr)
library(stringr)
#### Import data
files <-list.files(path = "~/Desktop/tarampi2016_rescue/pilotb data/", full.names = TRUE)
# read in and combine all the CSV files using bind_rows()
combined_data <- lapply(files, function(filepath) {
df <- read.csv(filepath)
return(df)
}) %>%
bind_rows()
#### Data exclusion / filtering
# exclude unwanted columns and rows
organized.data <- combined_data %>%
select("workerid",
"stimulus",
"response",
"condition",
"correct",
"bothQuestionsCorrect") %>%
filter (response != 0) %>%
filter (workerid != "na")
#### Prepare data for analysis - create columns etc.
correct_counts <- organized.data %>%
mutate(gender_extracted = gsub("^.*'sex': '([A-Za-z]+)'.*$", "\\1", response)) %>%  # Extract gender value
mutate(gender = ifelse(
gender_extracted %in% c("Female", "Male", "Other"),
gender_extracted,
NA
))%>%
mutate(
first_input = gsub(".*'first': '([^']+)',.*", "\\1", response),
second_input = gsub(".*'second': '([^']+)'\\}.*", "\\1", response)
)
precentage_correct <- correct_counts %>%
group_by(workerid)%>%
mutate(correct_percent = (sum (correct == "True"))/(sum (correct == "True") + sum (correct == "False")))
ready_data <- precentage_correct %>%
group_by(workerid) %>%
mutate(correct_count = sum(correct == "True", na.rm = TRUE)) %>%
filter(is.na(gender) == FALSE)
graph_data = ready_data %>%
group_by(condition, gender) %>%
mutate(mean_correct = mean(correct_count),mean_sem = sd(correct_count) / sqrt(n())
)
#descriptive statistics
ggplot(data = graph_data, aes(x = gender, y = mean_correct, fill = condition)) +
# Dodge the bars based on condition
geom_col(position = "dodge", width = 0.5) +
# Dodge the error bars as well
geom_errorbar(
aes(ymin = mean_correct - mean_sem, ymax = mean_correct + mean_sem),
width = 0,
position = position_dodge(0.5)
)
View(combined_data)
# read in and combine all the CSV files using bind_rows()
combined_data <- lapply(files, function(filepath) {
df <- read.csv(filepath)
return(df)
}) %>%
bind_rows()
View(combined_data)
View(combined_data)
View(combined_data)
View(combined_data)
View(combined_data)
#### Data exclusion / filtering
# exclude unwanted columns and rows
organized.data <- combined_data %>%
select("workerid",
"condition",
"stimulus",
"correct",
"response",
"gender",
"first",
"second",
"tech_difficulty",
"participant_hypothesis",
"bothQuestionsCorrect") %>%
filter (response != 0) %>%
filter (workerid != "na")
View(organized.data)
#### Prepare data for analysis - create columns that calculates the percentage of correct answers etc.
precentage_correct <- organized.data %>%
group_by(workerid)%>%
mutate(correct_percent = (sum (correct == "True"))/(sum (correct == "True") + sum (correct == "False")))
View(precentage_correct)
graph_data = ready_data %>%
group_by(condition, gender) %>%
mutate(mean_correct = mean(correct_count),mean_sem = sd(correct_count) / sqrt(n())
)
View(graph_data)
ready_data <- precentage_correct %>%
group_by(workerid) %>%
mutate(correct_count = sum(correct == "True", na.rm = TRUE)) %>%
filter(is.na(gender) == FALSE)
View(ready_data)
graph_data = ready_data %>%
group_by(condition, gender) %>%
mutate(mean_correct = mean(correct_count),mean_sem = sd(correct_count) / sqrt(n())
)
View(graph_data)
#descriptive statistics
ggplot(data = graph_data, aes(x = gender, y = mean_correct, fill = condition)) +
# Dodge the bars based on condition
geom_col(position = "dodge", width = 0.5) +
# Dodge the error bars as well
geom_errorbar(
aes(ymin = mean_correct - mean_sem, ymax = mean_correct + mean_sem),
width = 0,
position = position_dodge(0.5)
)
summary(anova)
###T-Tests
sem <- function(x) {sd(x, na.rm=TRUE) / sqrt(sum(!is.na((x))))}
ci <- function(x) {sem(x) * 1.96}
t.test(correct_count ~ condition, data = female_data, var.equal = TRUE)
###T-Tests
sem <- function(x) {sd(x, na.rm=TRUE) / sqrt(sum(!is.na((x))))}
ci <- function(x) {sem(x) * 1.96}
####Female Score By Condition
female_data <- ready_data %>%
subset(gender=='Female')
female_summary <- female_data %>%
group_by(condition) %>%
summarise(mean = mean(correct_count), sd = sd(correct_count), ci_lower = mean(correct_count) - ci(correct_count), ci_upper = mean(correct_count) + ci(correct_count))
t.test(correct_count ~ condition, data = female_data, var.equal = TRUE)
####Male Score By Condition
male_data <- ready_data %>%
subset(gender=='Male')
male_summary <- male_data %>%
group_by(condition) %>%
summarise(mean = mean(correct_count), sd = sd(correct_count), ci_lower = mean(correct_count) - ci(correct_count), ci_upper = mean(correct_count) + ci(correct_count))
t.test(correct_count ~ condition, data = male_data, var.equal = TRUE)
####Spatial Score By Sex
spatial_data = ready_data %>%
subset(condition=='spatial')
t.test(correct_count ~ gender, data = spatial_data, var.equal = TRUE)
####Social Score By Sex
social_data = ready_data %>%
subset(condition=='social')
t.test(correct_count ~ gender, data = social_data, var.equal = TRUE)
View(organized.data)
View(correct_counts)
View(graph_data)
simplified_data = graph_data %>%
group_by(workerid) %>%
filter(stimulus == "img/social/version2/p1.png") %>%
ungroup()
View(simplified_data)
View(graph_data)
filtered_data <- organized.data %>%
group_by(workerid) %>%
filter(stimulus == "img/social/version2/p1.png" | stimulus == "img/spatial/version2/p1.png") %>%
ungroup()
View(simplified_data)
filtered_data <- organized.data %>%
group_by(workerid) %>%
filter(stimulus == "img/social/version2/p1.png" | stimulus == "img/spatial/version2/p1.png") %>%
ungroup()
View(filtered_data)
graph_data = ready_data %>%
group_by(condition, gender) %>%
mutate(mean_correct = mean(correct_count),mean_sem = sd(correct_count) / sqrt(n())
)
#descriptive statistics
ggplot(data = graph_data, aes(x = gender, y = mean_correct, fill = condition)) +
# Dodge the bars based on condition
geom_col(position = "dodge", width = 0.5) +
# Dodge the error bars as well
geom_errorbar(
aes(ymin = mean_correct - mean_sem, ymax = mean_correct + mean_sem),
width = 0,
position = position_dodge(0.5)
)
t.test(correct_count ~ gender, data = social_data, var.equal = TRUE)
